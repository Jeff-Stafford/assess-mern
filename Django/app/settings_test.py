"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 1.9.1.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os
import sys

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'test-8t(dx9r^pz7*9u_=$f58w#li&e4=4-bq)ac*&()*&%&eo2%'

# SECURITY WARNING: don't run with debug turned on in production!
ELECTION_MANAGER_ENV = os.environ.get('ELECTION_MANAGER_ENV', 'DEV')

DEBUG = ELECTION_MANAGER_ENV == 'DEV'

ALLOWED_HOSTS = ['127.0.0.1', 'localhost', 'election-manager.devel', 'localelections.usvotefoundation.org', '10.0.0.23']
ELECTION_MANAGER_HOST = os.environ.get('ELECTION_MANAGER_HOST')
if ELECTION_MANAGER_HOST:
    ALLOWED_HOSTS.append(ELECTION_MANAGER_HOST)

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    #'django.contrib.gis',
    'django_select2',
    'django_celery_beat',
    'django_celery_results',
    'django_fsm',
    'nested_admin',
    'timezone_field',
    'formtools',
    'breadcrumbs',
    'bootstrap3',
    'bootstrap3_datetime',
    'compressor',
    'storages',
    'rest_framework',
    'rest_framework.authtoken',
    #'django_markup',
    'bootstrapform',
    'lib',
    'api',
    'eod',
    'commands',
    'manager',
    'svid',
    'user',
    'djangoformsetjs',
]

ADD_ELECTION_GIS_APP = False
if  os.environ.get('ADD_ELECTION_GIS_APP'):
    ADD_ELECTION_GIS_APP = True

# print("==================")
# print(sys.argv)
# print("==================")

#if not ('makemigrations' in sys.argv or 'migrate' in sys.argv) or ADD_ELECTION_GIS_APP:
INSTALLED_APPS += (
    'electiongis',
)

# print("==================")
# print(INSTALLED_APPS)
# print("==================")


MIDDLEWARE_CLASSES = [
    #'django.middleware.cache.UpdateCacheMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.middleware.http.ConditionalGetMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'breadcrumbs.middleware.BreadcrumbsMiddleware',
    #'django.middleware.cache.FetchFromCacheMiddleware',
]

ROOT_URLCONF = 'app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates'),],
        'APP_DIRS': True,
        'OPTIONS': {
            'debug': DEBUG,
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.i18n',
                'django.template.context_processors.media',
                'django.template.context_processors.static',
                'django.template.context_processors.tz',
            ],
        },
    },
]

WSGI_APPLICATION = 'app.wsgi.application'

# CACHES = {
#     'default': {
#         'BACKEND': 'django.core.cache.backends.dummy.DummyCache',
#     }
# }

CACHES = {
    'default': {
        'BACKEND': 'redis_cache.RedisCache',
        'LOCATION': os.environ.get('REDIS_LOCATION', 'redis:6379'),
    },
}



# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

DATABASES = {
        'default': {},
        'test_election_manager': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.environ.get('DB_ELECTION_MANAGER_NAME', 'test_election_manager'),
            'USER': os.environ.get('DB_ELECTION_MANAGER_USER', 'django'),
            'PASSWORD': os.environ.get('DB_ELECTION_MANAGER_PASSWORD', 'django'),
            'HOST': os.environ.get('DB_ELECTION_MANAGER_HOST', 'postgres'),
            'PORT': os.environ.get('DB_ELECTION_MANAGER_PORT', '5432'),
        },

        'test_election_manager_gis': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.environ.get('DB_ELECTION_MANAGER_GIS_NAME', 'test_election_manager_gis'),
            'USER': os.environ.get('DB_ELECTION_MANAGER_GIS_USER', 'django'),
            'PASSWORD': os.environ.get('DB_ELECTION_MANAGER_GIS_PASSWORD', 'django'),
            'HOST': os.environ.get('DB_ELECTION_MANAGER_GIS_HOST', 'postgres'),
            'PORT': os.environ.get('DB_ELECTION_MANAGER_GIS_PORT', '5432'),
        },

        'test_election_manager_eod': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.environ.get('DB_ELECTION_MANAGER_EOD_NAME', 'test_election_manager_eod'),
            'USER': os.environ.get('DB_ELECTION_MANAGER_EOD_USER', 'django'),
            'PASSWORD': os.environ.get('DB_ELECTION_MANAGER_EOD_PASSWORD', 'django'),
            'HOST': os.environ.get('DB_ELECTION_MANAGER_EOD_HOST', 'postgres'),
            'PORT': os.environ.get('DB_ELECTION_MANAGER_EOD_PORT', '5432'),
        }
}


DATABASE_ROUTERS = [
    'app.routers.APITestDBRouter',
]

# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 6,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

DEFAULT_FROM_EMAIL = "no-reply@localelections.usvotefoundation.org"

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.7/howto/static-files/
STATICFILES_DIRS = (
    os.path.realpath(os.path.join(BASE_DIR, 'static')),
)

STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'static_precompiler.finders.StaticPrecompilerFinder',
    'compressor.finders.CompressorFinder',
)

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

COMPRESS_ROOT = STATIC_ROOT = os.path.realpath(os.path.join(BASE_DIR, 'static.dist'))
MEDIA_ROOT = os.path.realpath(os.path.join(BASE_DIR, 'media'))

if ELECTION_MANAGER_ENV == 'DEV':

    STATIC_PRECOMPILER_OUTPUT_DIR = ''
    COMPRESS_URL = STATIC_URL = '/static/'
    MEDIA_URL = '/media/'
    COMPRESS_OUTPUT_DIR = 'cache'
    COMPRESS_ENABLED = False

    COMPRESS_CSS_FILTERS = (
        'compressor.filters.css_default.CssAbsoluteFilter',
        'compressor.filters.cssmin.CSSMinFilter',
    )

    COMPRESS_STORAGE = 'compressor.storage.CompressorFileStorage'
    COMPRESS_CSS_HASHING_METHOD = 'content'
else:
    # EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    # EMAIL_HOST = os.environ.get('ELECTION_MANAGER_EMAIL_HOST', 'localhost')
    # EMAIL_PORT = os.environ.get('ELECTION_MANAGER_EMAIL_PORT', '25')
    # EMAIL_HOST_USER = os.environ.get('ELECTION_MANAGER_EMAIL_HOST_USER', '')
    # EMAIL_HOST_PASSWORD = os.environ.get('ELECTION_MANAGER_EMAIL_HOST_PASSWORD', '')
    # EMAIL_USE_TLS = os.environ.get('ELECTION_MANAGER_EMAIL_USE_TLS', False)

    # AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
    # AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
    # AWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_STORAGE_BUCKET_NAME', 'static.localelections.usvotefoundation.org')

    STATICFILES_STORAGE = COMPRESS_STORAGE = 'app.s3storage.CachedS3BotoStorage'
    STATIC_URL = COMPRESS_URL = "//static.localelections.usvotefoundation.org/"
    COMPRESS_CSS_FILTERS = (
        'compressor.filters.css_default.CssAbsoluteFilter',
        'compressor.filters.cssmin.CSSMinFilter',
    )
    # COMPRESS_JS_FILTERS = ['compressor.filters.jsmin.SlimItFilter'] # slow
    COMPRESS_OFFLINE = True
    AWS_IS_GZIPPED = True

    AWS_HEADERS = {
        'Expires': 'Thu, 31 Dec 2099 20:00:00 GMT',
        'Cache-Control': 'max-age=94608000',
    }
    AWS_QUERYSTRING_AUTH = False

# Site
SITE_ID = 1

# Internationalization
# https://docs.djangoproject.com/en/1.7/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True
#USE_ETAGS = True
FORMAT_MODULE_PATH = 'app.formats'

LOGIN_URL = '/user/signin/'
LOGOUT_URL = '/user/signout/'

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'api.pagination.APILimitOffsetPagination',

    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ),

    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'PAGE_SIZE': 10,
    'DEFAULT_CHARSET': 'utf-8',
}

# Celery SETTINGS
CELERY_BROKER_URL = os.environ.get('CELERY_BROKER_URL', 'redis://localhost:6379/2')
CELERY_RESULT_BACKEND = os.environ.get('CELERY_RESULT_BACKEND', 'redis://localhost:6379/3')
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE

SELECT2_JS = '//cdnjs.cloudflare.com/ajax/libs/select2/4.0.2/js/select2.full.min.js'
SELECT2_CSS = '//cdnjs.cloudflare.com/ajax/libs/select2/4.0.2/css/select2.min.css'

MARKUP_SETTINGS = {
    'textile': {
        'head_offset': 1,
    }
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'verbose': {
            'format': '%(asctime)s [%(levelname)-7s] %(process)d#%(thread)d %(name)s: %(message)s',
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        }
    },
    'handlers': {
        'null': {
           # 'level': 'DEBUG',
           'class': 'logging.NullHandler',
        },
        'console':{
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'filters': ['require_debug_false']
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.realpath(os.path.join(BASE_DIR, 'logs', 'election_manager.log')),
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'ERROR',
        },
        'django.request': {
            'handlers': ['mail_admins', 'file'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.security': {
            'handlers': ['mail_admins', 'file'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.security.DisallowedHost': {
            'handlers': ['null'],
            'propagate': False,
        },
    }
}

# 'django.security': {
#     'handlers': ['mail_admins', 'file'],
#     'level': 'ERROR',
#     'propagate': False,
# },
